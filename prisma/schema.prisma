// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  //Collision-resistant Unique Identifier
  //Universally Unique Identifier
  id           String  @id @default(cuid())
  name         String
  email        String
  image        String? //(optional)
  customerId   String? @unique // for string payments 
  isSubscribed Boolean @default(false)

  subscription Subscription? // (optional)
  Comment      Comment[]
  Like         Like[]
  Order        Order[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Post {
  id        String  @id @default(cuid())
  mediaUrl  String?
  mediaType String?
  text      String
  userId    String  //author 
  likes     Int     @default(0)
  isPublic  Boolean @default(false)

  comments  Comment[]
  likesList Like[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Comment {
  id     String @id @default(cuid())
  text   String
  userId String //author of the comment 
  postId String // the post on which it is commented

  post Post @relation(fields: [postId], references: [id])
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@index([postId])
  @@index([userId])
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@index([postId])
  @@index([userId])
}

model Subscription {
  id        String    @id @default(cuid())
  userId    String    @unique // (required)
  planId    String // (required) //stripe planid optional 
  price     Int       @default(0)
  startDate DateTime? @default(now()) // (optional)
  endDate   DateTime? // (optional)

  user User @relation(fields: [userId], references: [id])
  //faster queries
  //ensures that the userId field in the Subscription table has an index

  @@index([userId])
}

model Product {
  id         String   @id @default(cuid())
  name       String
  image      String
  price      Int
  isArchived Boolean? @default(false)

  orders Order[]
}

model Order {
  id                String    @id @default(cuid())
  userId            String
  productId         String
  price             Int
  isPaid            Boolean   @default(false)
  size              String
  orderDate         DateTime? @default(now())
  shippingAddressId String?

  user            User             @relation(fields: [userId], references: [id])
  product         Product          @relation(fields: [productId], references: [id])
  shippingAddress ShippingAddress? @relation(fields: [shippingAddressId], references: [id])

  @@index([userId])
  @@index([productId])
}

model ShippingAddress {
  id         String  @id @default(cuid())
  address    String
  city       String
  state      String?
  postalCode String
  country    String

  order Order[]
}
